#dnf install nginx -y
#cp exp.conf /etc/nginx/default.d/expense.conf
#systemctl enable nginx
#rm -rf /usr/share/nginx/html/*
#curl -o /tmp/frontend.zip https://expense-web-app.s3.amazonaws.com/frontend.zip
#cd /usr/share/nginx/html
#unzip /tmp/frontend.zip
#systemctl restart nginx
#echo ("if you are seeing this then the installation of backend is successful.")

# - name: installing nginx ## we are using dnf install
#   ansible.builtin.dnf:
#     name: nginx                      ## we can download a version by simply mentioning nginx-version also nginx >=2.4 will install 2.4 or latest version if 2.4 is not present.
#     state: present                   ## install.


# - name: Copy file
#   ansible.builtin.copy:
#     src: proxy.conf
#     dest: /etc/nginx/default.d/expense.conf

# - name: Recursively remove directory
#   become : true 
#   ansible.builtin.file:
#     path: /usr/share/nginx/html/*
#     state: absent ## this means that the above path will be deleted.

# - name: unzipping the file after download
#   ansible.builtin.unarchive:
#     src: https://expense-web-app.s3.amazonaws.com/frontend.zip
#     dest: /usr/share/nginx/html
#     remote_src: yes # this should be yes if the download and the unzip should be done on remote machine.


# #- name: Restart service nginx
# #  ansible.builtin.service:
# #    name: nginx
# #    state: restarted

# #- name: Start service nginx
# #  ansible.builtin.service:
# #    name: nginx
# #    state: started

# # instead of above service which require multiple task to start enable and resrat the service we can use another module known as daemon whcih is used below.

# - name: Make sure a service unit is running
#   ansible.builtin.systemd_service:
#     name: nginx
#     state: started
#     enabled: true
#     daemon_reload: true

- name: installing nginx ## we are using dnf install
  ansible.builtin.dnf:
    name: "{{APP_NAME}}"                    ## we can download a version by simply mentioning nginx-version also nginx >=2.4 will install 2.4 or latest version if 2.4 is not present.
    state: present                   ## install.


- name: Copy file
  ansible.builtin.copy:
    src: proxy.conf
    dest: "{{conf_file}}" ## conf_file

- name: Recursively remove directory
  become : true 
  ansible.builtin.file:
    path: "{{nginx_path}}/*"
    state: absent ## this means that the above path will be deleted.

- name: unzipping the file after download
  ansible.builtin.unarchive:
    src: "{{URL_FRONTEND}}"
    dest: "{{nginx_path}}"
    remote_src: yes # this should be yes if the download and the unzip should be done on remote machine.


#- name: Restart service nginx
#  ansible.builtin.service:
#    name: nginx
#    state: restarted

#- name: Start service nginx
#  ansible.builtin.service:
#    name: nginx
#    state: started

# instead of above service which require multiple task to start enable and resrat the service we can use another module known as daemon whcih is used below.

- name: Make sure a service unit is running
  ansible.builtin.systemd_service:
    name: "{{APP_NAME}}"
    state: restarted
    enabled: true
    daemon_reload: true





